//hedhi bech tverifi si token valid walla
//guard maj3oul bech yblockik walla y5alik tet3ada c tt
//kifeh bech ya5ilk tet3ada walla yebloukik b token teb3ath wa9t li 3mlt enti login , yemchi fi blasa esmha headers , el request tetkwen men headers, body w barcha hajet okhrin
//hedhek 3leh ena marra lokhra gotlk a3ml console lel variables li declar√© fi guards li 3andek

import {
    CanActivate,
    ExecutionContext,
    Injectable,
    UnauthorizedException,
  } from '@nestjs/common';
  //JwtService pour travailler avec les JWT,
  import { JwtService } from '@nestjs/jwt';
  import { jwtConstants } from './constants';
  import { Request } from 'express';
  
  @Injectable()
  export class AuthGuard implements CanActivate {
    constructor(private jwtService: JwtService) {}

//Cette m√©thode canActivate est appel√©e automatiquement par NestJS lorsqu'une requ√™te est re√ßue par le serveur.
    async canActivate(context: ExecutionContext): Promise<boolean> {
      //context.switchToHttp().getRequest() r√©cup√®re l'objet de requ√™te HTTP √† partir du contexte d'ex√©cution.
      const request = context.switchToHttp().getRequest();
      //this.extractTokenFromHeader(request) extrait le token JWT de l'en-t√™te de la requ√™te.
      const token = this.extractTokenFromHeader(request);
      //Si aucun token n'est trouv√©, une exception UnauthorizedException est lev√©e,
      // indiquant que l'utilisateur n'est pas autoris√©.
      if (!token) {
        throw new UnauthorizedException();
      }
      try {
        //La m√©thode tente ensuite de v√©rifier la validit√© du token en utilisant this.jwtService.verifyAsync. /
        //Si la v√©rification r√©ussit, le payload du token est assign√© √† request['user'], 
        //ce qui permet d'acc√©der aux informations de l'utilisateur dans les gestionnaires de route ult√©rieurs.
        const payload = await this.jwtService.verifyAsync(
          token,
          {
            secret: jwtConstants.secret
          }
        );
        // üí° We're assigning the payload to the request object here
        // so that we can access it in our route handlers
        request['user'] = payload;
      } catch {
        throw new UnauthorizedException();
      }
      //Si une exception est lev√©e pendant la v√©rification (par exemple, en cas de token invalide), une exception UnauthorizedException est lev√©e.
//La m√©thode renvoie true pour indiquer que la requ√™te est autoris√©e √† acc√©der √† la route prot√©g√©e.
      return true;
    }
  //M√©thode extractTokenFromHeader :
//Cette m√©thode priv√©e extrait le token JWT de l'en-t√™te Authorization de la requ√™te.
//Elle utilise la d√©signation "Bearer" pour extraire le token. Si l'en-t√™te d'autorisation n'est pas pr√©sent 
//ou ne suit pas le format "Bearer {token}", la m√©thode renvoie undefined.
//Sinon, elle renvoie le token extrait
    private extractTokenFromHeader(request: Request): string | undefined {
      const [type, token] = request.headers.authorization?.split(' ') ?? [];
      console.log('token',token)
      return type === 'Bearer' ? token : undefined;
     
    }
  }